{
  "openapi": "3.0.0",
  "info": {
    "title": "ONDC Protocol API for logistics",
    "description": "ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3",
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/ONDC/ONDC-Protocol-Logistics/1.0.23",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "security": [
    {
      "SubscriberAuth": []
    },
    {
      "GatewaySubscriberAuth": []
    },
    {
      "GatewaySubscriberAuthNew": []
    }
  ],
  "paths": {
    "/search": {
      "post": {
        "tags": ["ONDC Seller App", "ONDC Gateway"],
        "description": "Search for services by intent",
        "requestBody": {
          "description": "Buyer searches for products and services",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/search_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/select": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Select items from the catalog and build your order",
        "requestBody": {
          "description": "Buyer selects one or more catalog items",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/select_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/init": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Initialize an order by providing billing and/or shipping details",
        "requestBody": {
          "description": "Buyer initializes order checkout",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/init_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/confirm": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Initialize an order by providing billing and/or shipping details",
        "requestBody": {
          "description": "Buyer confirms an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/confirm_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Fetch the latest order object",
        "requestBody": {
          "description": "Buyer checks for status of order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/status_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/track": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Track an active order",
        "requestBody": {
          "description": "Buyer tracks fulfillment of an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/track_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/cancel": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Cancel an order",
        "requestBody": {
          "description": "Buyer cancels an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancel_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/update": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Update an order",
        "requestBody": {
          "description": "Buyer updates an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/rating": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Provide feedback on a service",
        "requestBody": {
          "description": "Buyer rates for one or more rating categories",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rating_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/support": {
      "post": {
        "tags": ["ONDC Seller App"],
        "description": "Contact support",
        "requestBody": {
          "description": "Buyer searches for Support Contact details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/issue": {
      "post": {
        "tags": ["Complaint lifecycle management"],
        "description": "###  Operation Description \n * Create an issue for the following entities  of intrest, for which an issue is faced by the buyer: \n    +  order\n    +  item\n    +  transaction \n    +  fulfillment or\n    +  payment \n * The issue can be created/raised by any of \n    + the Issueca#/components/schemas/IssueCateogory' himself related to any of he entity mentioned  Or\n    + By any of the Issueca#/components/schemas/IssueCateogory'-app,seller-app, transaction-counter party, or logistics providers NPs to help resolve any issue rasied by the buyer.\n",
        "requestBody": {
          "description": "Buyer searches for Support Contact details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/issue_status": {
      "post": {
        "tags": ["Complaint status checks"],
        "description": "Fetch the status of a complaint",
        "requestBody": {
          "description": "Any of the network participants or the buyer or seller or lsp checks for status of order",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "$ref": "#/components/schemas/Context"
                  },
                  "message": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Network issue identifier is a unique number assigned to a complaint by the interfacing application",
                        "type": "string",
                        "format": "uuid"
                      }
                    },
                    "required": ["id"]
                  }
                },
                "required": ["context", "message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "object",
                      "properties": {
                        "ack": {
                          "$ref": "#/components/schemas/Ack"
                        }
                      },
                      "required": ["ack"]
                    },
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  },
                  "required": ["message"]
                }
              }
            }
          }
        }
      }
    },
    "/on_search": {
      "post": {
        "tags": ["ONDC Buyer App", "ONDC Gateway"],
        "description": "Send catalog",
        "requestBody": {
          "description": "Sellers provide their catalog in response to buyer search",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_search_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        }
      }
    },
    "/on_select": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Send draft order object with quoted price for selected items",
        "requestBody": {
          "description": "Seller provides quote for selected items",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_select_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_init": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Send order object with payment details updated",
        "requestBody": {
          "description": "Seller provides terms and conditions for an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_init_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_confirm": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Send active order object",
        "requestBody": {
          "description": "Seller confirms order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_confirm_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_track": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Send tracking details of an active order",
        "requestBody": {
          "description": "Seller provides tracking details for an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_track_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_cancel": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object",
        "requestBody": {
          "description": "Seller provides response to cancellation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_cancel_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_update": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Returns updated service with updated runtime object",
        "requestBody": {
          "description": "Seller provides response to order update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_update_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_status": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Fetch the status of a Service",
        "requestBody": {
          "description": "Seller provides status information for order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_status_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_rating": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Provide feedback on a service",
        "requestBody": {
          "description": "Seller provides response to rating provided by buyer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_rating_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/on_support": {
      "post": {
        "tags": ["ONDC Buyer App"],
        "description": "Contact Support",
        "requestBody": {
          "description": "Seller provides Contact Support details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on_support_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/get_cancellation_reasons": {
      "post": {
        "tags": ["Seller App Meta APIs"],
        "description": "Get cancellation reasons from the Seller App",
        "requestBody": {
          "description": "Context header is sent as the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/get_cancellation_reasons_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/cancellation_reasons": {
      "post": {
        "tags": ["Buyer App Meta APIs"],
        "description": "Get cancellation reasons from the Seller App",
        "requestBody": {
          "description": "List of cancellation reasons.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancellation_reasons_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/get_return_reasons": {
      "post": {
        "tags": ["Seller App Meta APIs"],
        "description": "Get return reasons from the Seller App",
        "requestBody": {
          "description": "Context header is sent as the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/get_return_reasons_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/return_reasons": {
      "post": {
        "tags": ["Buyer App Meta APIs"],
        "description": "Get return reasons from the Seller App",
        "requestBody": {
          "description": "List of return reasons",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/return_reasons_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/get_rating_categories": {
      "post": {
        "tags": ["Seller App Meta APIs"],
        "description": "Get a list of categories that can be rated by the Seller App",
        "requestBody": {
          "description": "Context header is sent as the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/get_rating_categories_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/rating_categories": {
      "post": {
        "tags": ["Buyer App Meta APIs"],
        "description": "Get a list of categories that can be rated by the Buyer App",
        "requestBody": {
          "description": "Array of categories which can be rated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rating_categories_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/get_feedback_categories": {
      "post": {
        "tags": ["Seller Meta APIs"],
        "description": "Get a list of categories for which feedback can be given by the Buyer App",
        "requestBody": {
          "description": "Context header is sent as the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/get_feedback_categories_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/feedback_categories": {
      "post": {
        "tags": ["Buyer App Meta APIs"],
        "description": "Get a list of categories for which feedback can be given by the Buyer App",
        "requestBody": {
          "description": "Array of categories for which feedback can be given by the Buyer App",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedback_categories_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/get_feedback_form": {
      "post": {
        "tags": ["Seller App Meta APIs"],
        "description": "Request a feedback form from the Seller App",
        "requestBody": {
          "description": "The rating value and category is sent by the Buyer App",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/get_feedback_form_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/feedback_form": {
      "post": {
        "tags": ["Buyer App Meta APIs"],
        "description": "Get a feedback form from the Seller App",
        "requestBody": {
          "description": "Feedback form sent by the Buyer App",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedback_form_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Acknowledgement of message received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Ack": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Describe the status of the ACK response. If schema validation passes, status is ACK else it is NACK",
            "enum": ["ACK", "NACK"]
          }
        },
        "description": "Describes the ACK response"
      },
      "AddOn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the add-on. This follows the syntax {item.id}/add-on/{add-on unique id} for item specific add-on OR "
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "description": "Describes an add-on"
      },
      "Address": {
        "type": "object",
        "properties": {
          "door": {
            "type": "string",
            "description": "Door / Shop number of the address"
          },
          "name": {
            "type": "string",
            "description": "Name of address if applicable. Example, shop name"
          },
          "building": {
            "type": "string",
            "description": "Name of the building or block"
          },
          "street": {
            "type": "string",
            "description": "Street name or number"
          },
          "locality": {
            "type": "string",
            "description": "Name of the locality, apartments"
          },
          "ward": {
            "type": "string",
            "description": "Name or number of the ward if applicable"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "state": {
            "type": "string",
            "description": "State name"
          },
          "country": {
            "type": "string",
            "description": "Country name"
          },
          "area_code": {
            "type": "string",
            "description": "Area code. This can be Pincode, ZIP code or any equivalent"
          }
        },
        "description": "Describes an address"
      },
      "Agent": {
        "description": "Describes an order executor",
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          },
          {
            "$ref": "#/components/schemas/Contact"
          },
          {
            "type": "object",
            "properties": {
              "rateable": {
                "$ref": "#/components/schemas/Rateable"
              }
            }
          }
        ]
      },
      "Authorization": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of authorization mechanism used"
          },
          "token": {
            "type": "string",
            "description": "Token used for authorization"
          },
          "valid_from": {
            "type": "string",
            "description": "Timestamp in RFC3339 format from which token is valid",
            "format": "date-time"
          },
          "valid_to": {
            "type": "string",
            "description": "Timestamp in RFC3339 format until which token is valid",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the token"
          }
        },
        "description": "Describes an authorization mechanism"
      },
      "Billing": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Personal details of the customer needed for billing."
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "tax_number": {
            "type": "string",
            "description": "GST number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Describes a billing event"
      },
      "Cancellation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["full", "partial"]
          },
          "ref_id": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "cancelled_by": {
            "type": "string"
          },
          "reasons": {
            "$ref": "#/components/schemas/Option"
          },
          "selected_reason": {
            "$ref": "#/components/schemas/Cancellation_selected_reason"
          },
          "additional_description": {
            "$ref": "#/components/schemas/Descriptor"
          }
        },
        "description": "Describes a cancellation event"
      },
      "CancellationTerm": {
        "type": "object",
        "properties": {
          "reason_required": {
            "type": "boolean",
            "description": "Indicates whether a reason is required to cancel the order"
          },
          "refund_eligible": {
            "type": "boolean",
            "description": "Indicates if cancellation will result in a refund"
          },
          "return_eligible": {
            "type": "boolean",
            "description": "Indicates if cancellation will result in a return to origin"
          },
          "fulfillment_state": {
            "description": "The state of fulfillment during which these terms are applicable.",
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ]
          },
          "return_policy": {
            "$ref": "#/components/schemas/CancellationTerm_return_policy"
          },
          "refund_policy": {
            "$ref": "#/components/schemas/CancellationTerm_refund_policy"
          },
          "cancel_by": {
            "description": "Information related to the time of cancellation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Time"
              }
            ]
          },
          "cancellation_fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "xinput_required": {
            "$ref": "#/components/schemas/XInput"
          },
          "xinput_response": {
            "$ref": "#/components/schemas/XInputResponse"
          },
          "external_ref": {
            "$ref": "#/components/schemas/MediaFile"
          }
        },
        "description": "Describes the cancellation terms of an item or an order. This can be referenced at an item or order level. Item-level cancellation terms can override the terms at the order level."
      },
      "Catalog": {
        "type": "object",
        "properties": {
          "bpp/descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "bpp/categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "bpp/fulfillments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fulfillment"
            }
          },
          "bpp/payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "bpp/offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Offer"
            }
          },
          "bpp/providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Provider"
            }
          },
          "exp": {
            "type": "string",
            "description": "Time after which catalog has to be refreshed",
            "format": "date-time"
          }
        },
        "description": "Describes a Seller App catalog"
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id of the category",
            "enum": [
              "Express Delivery",
              "Standard Delivery",
              "Immediate Delivery",
              "Same Day Delivery",
              "Next Day Delivery"
            ]
          },
          "parent_category_id": {
            "type": "string",
            "description": "Unique id of the parent category - Express delivery - Standard Delivery"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Describes a category."
      },
      "Circle": {
        "required": ["gps", "radius"],
        "type": "object",
        "properties": {
          "gps": {
            "$ref": "#/components/schemas/Gps"
          },
          "radius": {
            "$ref": "#/components/schemas/Scalar"
          }
        },
        "description": "Describes a circular area on the map"
      },
      "City": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the city"
          },
          "code": {
            "type": "string",
            "description": "Codification of city code will be using the std code of the city e.g. for Bengaluru, city code is 'std:080'"
          }
        },
        "description": "Describes a city"
      },
      "Contact": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        }
      },
      "Context": {
        "required": [
          "action",
          "bap_id",
          "bap_uri",
          "city",
          "core_version",
          "country",
          "domain",
          "message_id",
          "timestamp",
          "transaction_id"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "$ref": "#/components/schemas/Domain"
          },
          "country": {
            "$ref": "#/components/schemas/Country/properties/code"
          },
          "city": {
            "$ref": "#/components/schemas/City/properties/code"
          },
          "action": {
            "type": "string",
            "description": "Defines the ONDC API call. Any actions other than the enumerated actions are not supported by ONDC Protocol",
            "enum": [
              "search",
              "select",
              "init",
              "confirm",
              "update",
              "status",
              "track",
              "cancel",
              "rating",
              "support",
              "on_search",
              "on_select",
              "on_init",
              "on_confirm",
              "on_update",
              "on_status",
              "on_track",
              "on_cancel",
              "on_rating",
              "on_support"
            ]
          },
          "core_version": {
            "type": "string",
            "description": "Version of ONDC core API specification being used"
          },
          "bap_id": {
            "type": "string",
            "description": "Unique id of the Buyer App. By default it is the fully qualified domain name of the Buyer App"
          },
          "bap_uri": {
            "type": "string",
            "description": "URI of the Buyer App for accepting callbacks. Must have the same domain name as the bap_id",
            "format": "uri"
          },
          "bpp_id": {
            "type": "string",
            "description": "Unique id of the Seller App. By default it is the fully qualified domain name of the Seller App, mandatory for all peer-to-peer API requests, i.e. except search and on_search"
          },
          "bpp_uri": {
            "type": "string",
            "description": "URI of the Seller App. Must have the same domain name as the bap_id, mandatory for all peer-to-peer API requests, i.e. except search and on_search",
            "format": "uri"
          },
          "transaction_id": {
            "type": "string",
            "description": "This is a unique value which persists across all API calls from search through confirm"
          },
          "message_id": {
            "type": "string",
            "description": "This is a unique value which persists during a request / callback cycle"
          },
          "timestamp": {
            "type": "string",
            "description": "Time of request generation in RFC3339 format",
            "format": "date-time"
          },
          "key": {
            "type": "string",
            "description": "The encryption public key of the sender"
          },
          "ttl": {
            "type": "string",
            "description": "Timestamp for which this message holds valid in ISO8601 durations format - Outer limit for ttl for search, select, init, confirm, status, track, cancel, update, rating, support is 'PT30S' which is 30 seconds, different buyer apps can change this to meet their UX requirements, but it shouldn't exceed this outer limit"
          }
        },
        "description": "Describes a ONDC message context"
      },
      "Country": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the country"
          },
          "code": {
            "type": "string",
            "description": "Country code as per ISO 3166 Alpha-3 code format"
          }
        },
        "description": "Describes a country."
      },
      "DecimalValue": {
        "pattern": "[+-]?([0-9]*[.])?[0-9]+",
        "type": "string",
        "description": "Describes a decimal value"
      },
      "Descriptor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "short_desc": {
            "type": "string"
          },
          "long_desc": {
            "type": "string"
          },
          "additional_desc": {
            "$ref": "#/components/schemas/Descriptor_additional_desc"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "audio": {
            "type": "string",
            "format": "uri"
          },
          "3d_render": {
            "type": "string",
            "format": "uri"
          }
        },
        "description": "Describes the description of a real-world object."
      },
      "Dimensions": {
        "type": "object",
        "properties": {
          "length": {
            "$ref": "#/components/schemas/Scalar"
          },
          "breadth": {
            "$ref": "#/components/schemas/Scalar"
          },
          "height": {
            "$ref": "#/components/schemas/Scalar"
          }
        },
        "description": "Describes the dimensions of a real-world object"
      },
      "Document": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "label": {
            "type": "string"
          }
        },
        "description": "Describes a document which can be sent as a url"
      },
      "Domain": {
        "type": "string",
        "description": "Codification of domain for ONDC",
        "enum": ["nic2004:60232"]
      },
      "Duration": {
        "type": "string",
        "description": "Describes duration as per ISO8601 format"
      },
      "Error": {
        "required": ["code", "type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CONTEXT-ERROR",
              "CORE-ERROR",
              "DOMAIN-ERROR",
              "POLICY-ERROR",
              "JSON-SCHEMA-ERROR"
            ]
          },
          "code": {
            "type": "string",
            "description": "ONDC specific error code. For full list of error codes, refer to docs/drafts/Error Codes.md of this repo"
          },
          "path": {
            "type": "string",
            "description": "Path to json schema generating the error. Used only during json schema validation errors"
          },
          "message": {
            "type": "string",
            "description": "Human readable message describing the error"
          }
        },
        "description": "Describes an error object"
      },
      "Feedback": {
        "type": "object",
        "properties": {
          "feedback_form": {
            "$ref": "#/components/schemas/FeedbackForm"
          },
          "feedback_url": {
            "$ref": "#/components/schemas/FeedbackUrl"
          }
        },
        "description": "Feedback for a service"
      },
      "FeedbackForm": {
        "type": "array",
        "description": "Describes a feedback form that a Seller App can send to get feedback from the Buyer App",
        "items": {
          "$ref": "#/components/schemas/FeedbackFormElement"
        }
      },
      "FeedbackFormElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parent_id": {
            "$ref": "#/components/schemas/FeedbackFormElement/properties/id"
          },
          "question": {
            "type": "string",
            "description": "Specifies the question to which the answer options will be contained in the child FeedbackFormElements"
          },
          "answer": {
            "type": "string",
            "description": "Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id"
          },
          "answer_type": {
            "type": "string",
            "description": "Specifies how the answer option should be rendered.",
            "enum": ["radio", "checkbox", "text"]
          }
        },
        "description": "An element in the feedback form. It can be question or an answer to the question."
      },
      "FeedbackUrl": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "feedback URL sent by the Seller App",
            "format": "uri"
          },
          "tl_method": {
            "type": "string",
            "enum": ["http/get", "http/post"]
          },
          "params": {
            "$ref": "#/components/schemas/FeedbackUrl_params"
          }
        },
        "description": "Describes how a feedback URL will be sent by the Seller App"
      },
      "Fee": {
        "type": "object",
        "properties": {
          "percentage": {
            "description": "Percentage of a value",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalValue"
              }
            ]
          },
          "amount": {
            "description": "A fixed value",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          }
        },
        "description": "A fee applied on a particular entity"
      },
      "Form": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL from where the form can be fetched. The content fetched from the url must be processed as per the mime_type specified in this object. Once fetched, the rendering platform can choosed to render the form as-is as an embeddable element; or process it further to blend with the theme of the application. In case the interface is non-visual, the the render can process the form data and reproduce it as per the standard specified in the form.",
            "format": "uri"
          },
          "data": {
            "type": "string",
            "description": "The form content string. This content will again follow the mime_type field for processing. Typically forms should be sent as an html string starting with <form></form> tags. The application must render this form after removing any css or javascript code if necessary. The `action` attribute in the form should have a url where the form needs to be submitted."
          },
          "mime_type": {
            "type": "string",
            "description": "This field indicates the nature and format of the form received by querying the url. MIME types are defined and standardized in IETF's RFC 6838."
          }
        },
        "description": "Describes a form"
      },
      "Fulfillment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique reference ID to the fulfillment of an order"
          },
          "type": {
            "type": "string",
            "description": "This describes the type of fulfillment"
          },
          "@ondc/org/awb_no": {
            "type": "string"
          },
          "@ondc/org/ewaybillno": {
            "type": "string"
          },
          "@ondc/org/ebnexpirydate": {
            "type": "string",
            "format": "date-time"
          },
          "provider_id": {
            "$ref": "#/components/schemas/Provider/properties/id"
          },
          "rating": {
            "$ref": "#/components/schemas/Rating/properties/value"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "tracking": {
            "type": "boolean",
            "description": "Indicates whether the fulfillment allows tracking",
            "default": false
          },
          "customer": {
            "$ref": "#/components/schemas/Fulfillment_customer"
          },
          "agent": {
            "$ref": "#/components/schemas/Agent"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "vehicle": {
            "$ref": "#/components/schemas/Vehicle"
          },
          "start": {
            "$ref": "#/components/schemas/Fulfillment_start"
          },
          "end": {
            "$ref": "#/components/schemas/Fulfillment_end"
          },
          "rateable": {
            "$ref": "#/components/schemas/Rateable"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Describes how a single product/service will be rendered/fulfilled to the end customer"
      },
      "Gps": {
        "pattern": "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$",
        "type": "string",
        "description": "Describes a gps coordinate"
      },
      "Image": {
        "type": "string",
        "description": "Image of an object. <br/><br/> A url based image will look like <br/><br/>```uri:http://path/to/image``` <br/><br/> An image can also be sent as a data string. For example : <br/><br/> ```data:js87y34ilhriuho84r3i4```"
      },
      "Intent": {
        "type": "object",
        "properties": {
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "fulfillment": {
            "$ref": "#/components/schemas/Fulfillment"
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "offer": {
            "$ref": "#/components/schemas/Offer"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "@ondc/org/payload_details": {
            "$ref": "#/components/schemas/Intent_ondcorgpayload_details"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Intent of a user. Used for searching for services"
      },
      "ItemQuantity": {
        "type": "object",
        "properties": {
          "allocated": {
            "$ref": "#/components/schemas/ItemQuantity_allocated"
          },
          "available": {
            "$ref": "#/components/schemas/ItemQuantity_allocated"
          },
          "maximum": {
            "$ref": "#/components/schemas/ItemQuantity_maximum"
          },
          "minimum": {
            "$ref": "#/components/schemas/ItemQuantity_allocated"
          },
          "selected": {
            "$ref": "#/components/schemas/ItemQuantity_allocated"
          }
        },
        "description": "Describes count or amount of an item"
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the most unique identifier of a service item. An example of an Item ID could be the SKU of a product."
          },
          "parent_item_id": {
            "$ref": "#/components/schemas/Item/properties/id"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "category_id": {
            "$ref": "#/components/schemas/Category/properties/id"
          },
          "fulfillment_id": {
            "$ref": "#/components/schemas/Fulfillment/properties/id"
          },
          "rating": {
            "$ref": "#/components/schemas/Rating/properties/value"
          },
          "location_id": {
            "$ref": "#/components/schemas/Location/properties/id"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "rateable": {
            "$ref": "#/components/schemas/Rateable"
          },
          "matched": {
            "type": "boolean"
          },
          "related": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Describes a product or a service offered to the end consumer by the provider."
      },
      "Language": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "description": "indicates language code. ONDC supports language codes as per ISO 639.2 standard"
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "gps": {
            "$ref": "#/components/schemas/Gps"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "station_code": {
            "type": "string"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "circle": {
            "$ref": "#/components/schemas/Circle"
          },
          "polygon": {
            "type": "string"
          },
          "3dspace": {
            "type": "string"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          }
        },
        "description": "Describes the location of a runtime object."
      },
      "MediaFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "string",
            "description": "indicates the nature and format of the document, file, or assortment of bytes. MIME types are defined and standardized in IETF's RFC 6838"
          },
          "url": {
            "type": "string",
            "description": "The URL of the file",
            "format": "uri"
          },
          "signature": {
            "type": "string",
            "description": "The digital signature of the file signed by the sender"
          },
          "dsa": {
            "type": "string",
            "description": "The signing algorithm used by the sender"
          }
        },
        "description": "This object contains a url to a media file."
      },
      "Name": {
        "type": "string",
        "description": "Describes the name of a person in format: ./{given_name}/{honorific_prefix}/{first_name}/{middle_name}/{last_name}/{honorific_suffix}"
      },
      "Offer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "location_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location/properties/id"
            }
          },
          "category_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category/properties/id"
            }
          },
          "item_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item/properties/id"
            }
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          }
        },
        "description": "Describes an offer"
      },
      "Operator": {
        "description": "Describes the agent of a service",
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          },
          {
            "properties": {
              "experience": {
                "$ref": "#/components/schemas/Operator_experience"
              }
            }
          }
        ]
      },
      "Option": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          }
        },
        "description": "Describes a selectable option"
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for Order across network, will be created by buyer app in confirm API"
          },
          "state": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/Order_provider"
          },
          "items": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "add_ons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order_add_ons"
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order_offers"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "billing": {
            "$ref": "#/components/schemas/Billing"
          },
          "cancellation_terms": {
            "type": "array",
            "description": "The cancellation terms of this order. This can be overriden at the item level cancellation terms.",
            "items": {
              "$ref": "#/components/schemas/CancellationTerm"
            }
          },
          "fulfillments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fulfillment"
            }
          },
          "quote": {
            "$ref": "#/components/schemas/Quotation"
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "@ondc/org/created_by": {
            "type": "string",
            "description": "order created by",
            "enum": ["buyer-app", "seller-app"]
          },
          "@ondc/org/cancellation": {
            "$ref": "#/components/schemas/Cancellation"
          },
          "@ondc/org/linked_order": {
            "$ref": "#/components/schemas/Order_ondcorglinked_order"
          }
        },
        "description": "Describes the details of an order -"
      },
      "Organization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "cred": {
            "type": "string"
          }
        },
        "description": "Describes an organization"
      },
      "Page": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "next_id": {
            "type": "string"
          }
        },
        "description": "Describes a page in a search result"
      },
      "Payment": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "A payment uri to be called by the Buyer App. If empty, then the payment is to be done offline. The details of payment should be present in the params object. If ```tl_method``` = http/get, then the payment details will be sent as url params. Two url param values, ```$transaction_id``` and ```$amount``` are mandatory. And example url would be : https://www.example.com/pay?txid=$transaction_id&amount=$amount&vpa=upiid&payee=shopez&billno=1234",
            "format": "uri"
          },
          "tl_method": {
            "type": "string",
            "enum": ["http/get", "http/post", "payto", "upi"]
          },
          "params": {
            "$ref": "#/components/schemas/Payment_params"
          },
          "type": {
            "type": "string",
            "enum": [
              "ON-ORDER",
              "PRE-FULFILLMENT",
              "ON-FULFILLMENT",
              "POST-FULFILLMENT"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["PAID", "NOT-PAID", "PENDING"]
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "collected_by": {
            "type": "string",
            "enum": ["BAP", "BPP"]
          },
          "@ondc/org/collection_amount": {
            "type": "string",
            "description": "CoD collection amount"
          },
          "@ondc/org/settlement_window": {
            "type": "string",
            "description": "settlement window in ISO8601 durations format e.g. 'PT48H' indicates T+2 settlement"
          },
          "@ondc/org/settlement_window_status": {
            "type": "string",
            "enum": ["Assert", "Agree", "Disagree", "Terminate"]
          },
          "@ondc/org/settlement_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment_ondcorgsettlement_details"
            }
          }
        },
        "required": ["type"],
        "description": "Describes a payment"
      },
      "Person": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "description": "Gender of something, typically a Person, but possibly also fictional characters, animals, etc. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender"
          },
          "cred": {
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Describes a person."
      },
      "Policy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "parent_policy_id": {
            "$ref": "#/components/schemas/Policy/properties/id"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          }
        },
        "description": "Describes a policy. Allows for domain extension."
      },
      "Price": {
        "required": ["currency", "value"],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "ISO 4217 alphabetic currency code e.g. 'INR'"
          },
          "value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "estimated_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "computed_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "listed_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "offered_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "minimum_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "maximum_value": {
            "$ref": "#/components/schemas/DecimalValue"
          }
        },
        "description": "Describes the price of an item. Allows for domain extension."
      },
      "Provider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the provider"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "category_id": {
            "type": "string",
            "description": "Category Id of the provider"
          },
          "rating": {
            "$ref": "#/components/schemas/Rating/properties/value"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "fulfillments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fulfillment"
            }
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Location"
                },
                {
                  "type": "object",
                  "properties": {
                    "rateable": {
                      "$ref": "#/components/schemas/Rateable"
                    }
                  }
                }
              ]
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Offer"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "exp": {
            "type": "string",
            "description": "Time after which catalog has to be refreshed",
            "format": "date-time"
          },
          "rateable": {
            "$ref": "#/components/schemas/Rateable"
          },
          "tags": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Describes a service provider. This can be a restaurant, a hospital, a Store etc"
      },
      "Quotation": {
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "breakup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quotation_breakup"
            }
          },
          "ttl": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "Describes a quote"
      },
      "Rateable": {
        "type": "boolean",
        "description": "If the entity can be rated or not"
      },
      "Rating": {
        "type": "object",
        "properties": {
          "rating_category": {
            "type": "string",
            "description": "Category of the object being rated"
          },
          "id": {
            "type": "string",
            "description": "Id of the object being rated"
          },
          "value": {
            "maximum": 5,
            "minimum": 1,
            "type": "number",
            "description": "Rating value given to the object (1 - Poor; 2 - Needs improvement; 3 - Satisfactory; 4 - Good; 5 - Excellent)"
          },
          "feedback_form": {
            "$ref": "#/components/schemas/FeedbackForm"
          },
          "feedback_id": {
            "$ref": "#/components/schemas/FeedbackUrl/properties/params/properties/feedback_id"
          }
        },
        "description": "Describes the rating of a person or an object."
      },
      "RatingAck": {
        "type": "object",
        "properties": {
          "feedback_ack": {
            "type": "boolean",
            "description": "If feedback has been recorded or not"
          },
          "rating_ack": {
            "type": "boolean",
            "description": "If rating has been recorded or not"
          }
        }
      },
      "Scalar": {
        "required": ["unit", "value"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CONSTANT", "VARIABLE"]
          },
          "value": {
            "type": "number"
          },
          "estimated_value": {
            "type": "number"
          },
          "computed_value": {
            "type": "number"
          },
          "range": {
            "$ref": "#/components/schemas/Scalar_range"
          },
          "unit": {
            "type": "string"
          }
        },
        "description": "An object representing a scalar quantity."
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/Duration"
          },
          "holidays": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "times": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "description": "Describes a schedule"
      },
      "State": {
        "type": "object",
        "properties": {
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_by": {
            "type": "string",
            "description": "ID of entity which changed the state"
          }
        },
        "description": "Describes a state"
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "subscriber_id": {
            "type": "string",
            "description": "Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region"
          },
          "type": {
            "type": "string",
            "enum": ["bap", "bpp", "bg"]
          },
          "cb_url": {
            "type": "string",
            "description": "Callback URL of the subscriber. The Registry will call this URL's on_subscribe API to validate the subscriber\\'s credentials"
          },
          "domain": {
            "$ref": "#/components/schemas/Domain"
          },
          "city": {
            "$ref": "#/components/schemas/City/properties/code"
          },
          "country": {
            "$ref": "#/components/schemas/Country/properties/code"
          },
          "signing_public_key": {
            "type": "string",
            "description": "Signing Public key of the subscriber. <br/><br/>Any subscriber platform (Buyer App, Seller App, Gateway) who wants to transact on the network must digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the transport layer header. In case of ```HTTP``` it is the ```Authorization``` header. <br><br/>The ```Authorization``` will be used to validate the signature of a Buyer App or Seller App.<br/><br/>Furthermore, if an API call is being proxied or multicast by a ONDC Gateway, the Gateway must use it\\'s signing key to digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the ```X-Gateway-Authorization``` header."
          },
          "encryption_public_key": {
            "type": "string",
            "description": "Encryption public key of the Buyer App. Any Seller App must encrypt the ```requestBody.message``` value of the ```on_search``` API using this public key."
          },
          "status": {
            "type": "string",
            "enum": [
              "INITIATED",
              "UNDER_SUBSCRIPTION",
              "SUBSCRIBED",
              "INVALID_SSL",
              "UNSUBSCRIBED"
            ]
          },
          "created": {
            "type": "string",
            "description": "Timestamp when a subscriber was added to the registry with status = INITIATED",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "description": "Expiry timestamp in UTC derived from the ```lease_time``` of the subscriber",
            "format": "date-time"
          }
        },
        "description": "Any entity which wants to authenticate itself on a network. This can be a Buyer App, Seller App or Gateway."
      },
      "Support": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["order", "billing", "fulfillment"]
          },
          "ref_id": {
            "type": "string"
          },
          "channels": {
            "$ref": "#/components/schemas/TagGroup"
          }
        },
        "description": "Customer support"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The machine-readable name of the tag. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value."
          },
          "name": {
            "type": "string",
            "description": "The human-readable name of the tag. This set by the BPP and rendered as-is by the BAP. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using the `code` property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency."
          },
          "value": {
            "type": "string",
            "description": "The value of the tag. This set by the BPP and rendered as-is by the BAP."
          },
          "display": {
            "type": "boolean",
            "description": "This value indicates if the tag is intended for display purposes. If set to `true`, then this tag must be displayed. If it is set to `false`, it should not be displayed. This value can override the group display value."
          }
        },
        "description": "Describes a tag. This is a simple key-value store which is used to contain extended metadata. This object can be added as a property to any schema to describe extended attributes. For BAPs, tags can be sent during search to optimize and filter search results. BPPs can use tags to index their catalog to allow better search functionality. Tags are sent by the BPP as part of the catalog response in the `on_search` callback. Tags are also meant for display purposes. Upon receiving a tag, BAPs are meant to render them as name-value pairs. This is particularly useful when rendering tabular information about a product or service."
      },
      "TagGroup": {
        "type": "object",
        "properties": {
          "display": {
            "type": "boolean",
            "description": "Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.",
            "default": true
          },
          "code": {
            "type": "string",
            "description": "The machine-readable name of the tag group. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value. Values outside the allowed values may or may not be ignored by the rendering platform. As this schema is purely for catalog display purposes, it is not recommended to send this value during search."
          },
          "name": {
            "type": "string",
            "description": "A human-readable string describing the heading under which the tags are to be displayed. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using code property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency. As this schema is purely for catalog display purposes, it is not recommended to send this value during `search`."
          },
          "list": {
            "type": "array",
            "description": "An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the `search` and achieve more relevant results. When received during `on_search`, BAPs must render this list under the heading described by the `name` property of this schema.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "description": "A collection of tag objects with group level attributes. For detailed documentation on the Tags and Tag Groups schema go to https://github.com/beckn/protocol-specifications/discussions/316"
      },
      "Time": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "range": {
            "$ref": "#/components/schemas/Time_range"
          },
          "days": {
            "type": "string",
            "description": "comma separated values representing days of the week"
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        },
        "description": "Describes time in its various forms. It can be a single point in time; duration; or a structured timetable of operations"
      },
      "TrackingData": {
        "$ref": "#/components/schemas/Location/properties/gps"
      },
      "Tracking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique tracking reference number"
          },
          "url": {
            "type": "string",
            "description": "A URL to the tracking endpoint. This can be a link to a tracking webpage, a webhook URL created by the BAP where BPP can push the tracking data, or a GET url creaed by the BPP which the BAP can poll to get the tracking data. It can also be a websocket URL where the BPP can push real-time tracking data.",
            "format": "uri"
          },
          "location": {
            "description": "In case there is no real-time tracking endpoint available, this field will contain the latest location of the entity being tracked. The BPP will update this value everytime the BAP calls the track API.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "This value indicates if the tracking is currently active or not. If this value is `active`, then the BAP can begin tracking the order. If this value is `inactive`, the tracking URL is considered to be expired and the BAP should stop tracking the order.",
            "enum": ["active", "inactive"]
          }
        },
        "description": "Contains tracking information that can be used by the BAP to track the fulfillment of an order in real-time. which is useful for knowing the location of time sensitive deliveries."
      },
      "Vehicle": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "capacity": {
            "type": "integer"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "variant": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "energy_type": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          }
        },
        "description": "Describes the properties of a vehicle used in a mobility service"
      },
      "XInput": {
        "description": "Contains any additional or extended inputs required to confirm an order. This is typically a Form Input. Sometimes, selection of catalog elements is not enough for the BPP to confirm an order. For example, to confirm a flight ticket, the airline requires details of the passengers along with information on baggage, identity, in addition to the class of ticket. Similarly, a logistics company may require details on the nature of shipment in order to confirm the shipping. A recruiting firm may require additional details on the applicant in order to confirm a job application. For all such purposes, the BPP can choose to send this object attached to any object in the catalog that is required to be sent while placing the order. This object can typically be sent at an item level or at the order level. The item level XInput will override the Order level XInput as it indicates a special requirement of information for that particular item. Hence the BAP must render a separate form for the Item and another form at the Order level before confirmation.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Form"
          }
        ]
      },
      "XInputResponse": {
        "type": "array",
        "description": "The response to the form fetched via the XInput URL",
        "items": {
          "$ref": "#/components/schemas/XInputResponse_inner"
        }
      },
      "search_message": {
        "type": "object",
        "properties": {
          "intent": {
            "$ref": "#/components/schemas/Intent"
          }
        }
      },
      "search_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/search_message"
          }
        }
      },
      "inline_response_200": {
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/inline_response_200_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "select_message": {
        "required": ["order"],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        }
      },
      "select_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          }
        }
      },
      "init_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          }
        }
      },
      "confirm_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          }
        }
      },
      "status_message": {
        "required": ["order_id"],
        "type": "object",
        "properties": {
          "order_id": {
            "$ref": "#/components/schemas/Order/properties/id"
          }
        }
      },
      "status_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/status_message"
          }
        }
      },
      "track_message": {
        "required": ["order_id"],
        "type": "object",
        "properties": {
          "order_id": {
            "$ref": "#/components/schemas/Order/properties/id"
          },
          "callback_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "track_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/track_message"
          }
        }
      },
      "cancel_message": {
        "required": ["order_id"],
        "type": "object",
        "properties": {
          "order_id": {
            "$ref": "#/components/schemas/Order/properties/id"
          },
          "cancellation_reason_id": {
            "$ref": "#/components/schemas/Option/properties/id"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          }
        }
      },
      "cancel_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/cancel_message"
          }
        }
      },
      "update_message": {
        "required": ["order", "update_target"],
        "type": "object",
        "properties": {
          "update_target": {
            "type": "string",
            "description": "Comma separated values of order objects being updated. For example: ```\"update_target\":\"item,billing,fulfillment\"```"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        }
      },
      "update_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/update_message"
          }
        }
      },
      "rating_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/Rating"
          }
        }
      },
      "support_message": {
        "type": "object",
        "properties": {
          "ref_id": {
            "type": "string",
            "description": "ID of the element for which support is needed"
          }
        }
      },
      "support_body": {
        "required": ["context", "message"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/support_message"
          }
        }
      },
      "on_search_message": {
        "required": ["catalog"],
        "type": "object",
        "properties": {
          "catalog": {
            "$ref": "#/components/schemas/Catalog"
          }
        }
      },
      "on_search_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/on_search_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "inline_response_200_1": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/inline_response_200_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_select_message_order": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "provider_location": {
            "$ref": "#/components/schemas/Location"
          },
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Item"
                },
                {
                  "properties": {
                    "quantity": {
                      "$ref": "#/components/schemas/ItemQuantity"
                    }
                  }
                }
              ]
            }
          },
          "add_ons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOn"
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Offer"
            }
          },
          "quote": {
            "$ref": "#/components/schemas/Quotation"
          }
        }
      },
      "on_select_message": {
        "required": ["order"],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/on_select_message_order"
          }
        }
      },
      "on_select_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/on_select_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_init_message_order_provider": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Provider/properties/id"
          }
        }
      },
      "on_init_message_order_provider_location": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Location/properties/id"
          }
        }
      },
      "on_init_message_order_items": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Item/properties/id"
          },
          "quantity": {
            "$ref": "#/components/schemas/ItemQuantity/properties/selected"
          }
        }
      },
      "on_init_message_order_add_ons": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AddOn/properties/id"
          }
        }
      },
      "on_init_message_order_offers": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Offer/properties/id"
          }
        }
      },
      "on_init_message_order": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/on_init_message_order_provider"
          },
          "provider_location": {
            "$ref": "#/components/schemas/on_init_message_order_provider_location"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/on_init_message_order_items"
            }
          },
          "add_ons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/on_init_message_order_add_ons"
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/on_init_message_order_offers"
            }
          },
          "billing": {
            "$ref": "#/components/schemas/Billing"
          },
          "fulfillment": {
            "$ref": "#/components/schemas/Fulfillment"
          },
          "quote": {
            "$ref": "#/components/schemas/Quotation"
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          }
        }
      },
      "on_init_message": {
        "required": ["order"],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/on_init_message_order"
          }
        }
      },
      "on_init_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/on_init_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_confirm_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_track_message": {
        "required": ["tracking"],
        "type": "object",
        "properties": {
          "tracking": {
            "$ref": "#/components/schemas/Tracking"
          }
        }
      },
      "on_track_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/on_track_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_cancel_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_update_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_status_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/select_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_rating_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/RatingAck"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "on_support_message": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "format": "phone"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "on_support_body": {
        "required": ["context"],
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/on_support_message"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "get_cancellation_reasons_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          }
        }
      },
      "cancellation_reasons_message": {
        "type": "object",
        "properties": {
          "cancellation_reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          }
        }
      },
      "cancellation_reasons_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/cancellation_reasons_message"
          }
        }
      },
      "get_return_reasons_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          }
        }
      },
      "return_reasons_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "return_reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          }
        }
      },
      "get_rating_categories_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          }
        }
      },
      "rating_categories_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "rating_categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rating/properties/rating_category"
            }
          }
        }
      },
      "get_feedback_categories_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          }
        }
      },
      "feedback_categories_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "feedback_categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rating/properties/rating_category"
            }
          }
        }
      },
      "get_feedback_form_message": {
        "type": "object",
        "properties": {
          "rating_value": {
            "$ref": "#/components/schemas/Rating/properties/value"
          },
          "rating_category": {
            "$ref": "#/components/schemas/Rating/properties/rating_category"
          }
        }
      },
      "get_feedback_form_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/get_feedback_form_message"
          }
        }
      },
      "feedback_form_body": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "message": {
            "$ref": "#/components/schemas/Feedback"
          }
        }
      },
      "Cancellation_selected_reason": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Option/properties/id"
          }
        }
      },
      "CancellationTerm_return_policy": {
        "type": "object",
        "properties": {
          "return_eligible": {
            "type": "boolean",
            "description": "Indicates whether the item is eligible for return"
          },
          "return_within": {
            "description": "Applicable only for buyer managed returns where the buyer has to return the item to the origin before a certain date-time, failing which they will not be eligible for refund.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Time"
              }
            ]
          },
          "return_location": {
            "$ref": "#/components/schemas/Location"
          },
          "fulfillment_managed_by": {
            "type": "string",
            "enum": ["customer", "provider"]
          }
        },
        "description": "Describes the return policy of an item or an order"
      },
      "CancellationTerm_refund_policy": {
        "type": "object",
        "properties": {
          "refund_eligible": {
            "type": "boolean",
            "description": "Indicates if cancellation will result in a refund"
          },
          "refund_within": {
            "description": "Time within which refund will be processed after successful cancellation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Time"
              }
            ]
          },
          "refund_amount": {
            "$ref": "#/components/schemas/Price"
          }
        }
      },
      "Descriptor_additional_desc": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "content_type": {
            "type": "string",
            "enum": ["text/plain", "text/html", "application/json"]
          }
        }
      },
      "FeedbackUrl_params": {
        "required": ["feedback_id"],
        "type": "object",
        "properties": {
          "feedback_id": {
            "type": "string",
            "description": "This value will be placed in the the $feedback_id url param in case of http/get and in the requestBody http/post requests"
          }
        },
        "additionalProperties": {
          "type": "string"
        }
      },
      "Fulfillment_customer": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          }
        }
      },
      "Fulfillment_start": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "instructions": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "authorization": {
            "$ref": "#/components/schemas/Authorization"
          }
        },
        "description": "Details on the start of fulfillment"
      },
      "Fulfillment_end": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "instructions": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "authorization": {
            "$ref": "#/components/schemas/Authorization"
          }
        },
        "description": "Details on the end of fulfillment"
      },
      "Intent_ondcorgpayload_details": {
        "type": "object",
        "properties": {
          "weight": {
            "$ref": "#/components/schemas/Scalar"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "category": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Price"
          },
          "dangerous_goods": {
            "type": "boolean"
          }
        },
        "description": "payload details that will allow logistics provider to determine serviceability. For weight, enums for unit are - \"kilogram\", \"gram\" For dimensions, enums for length.unit, breadth.unit and height.unit are - \"meter\", \"centimeter\""
      },
      "ItemQuantity_allocated": {
        "type": "object",
        "properties": {
          "count": {
            "minimum": 0,
            "type": "integer"
          },
          "measure": {
            "$ref": "#/components/schemas/Scalar"
          }
        }
      },
      "ItemQuantity_maximum": {
        "type": "object",
        "properties": {
          "count": {
            "minimum": 1,
            "type": "integer"
          },
          "measure": {
            "$ref": "#/components/schemas/Scalar"
          }
        }
      },
      "Operator_experience": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "Order_provider_locations": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Location/properties/id"
          }
        }
      },
      "Order_provider": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Provider/properties/id"
          },
          "locations": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order_provider_locations"
            }
          }
        }
      },
      "Order_add_ons": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AddOn/properties/id"
          }
        }
      },
      "Order_offers": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Offer/properties/id"
          }
        }
      },
      "Order_ondcorglinked_order_items": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "string"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "quantity": {
            "$ref": "#/components/schemas/ItemQuantity/properties/selected"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          }
        }
      },
      "Order_ondcorglinked_order_provider": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Provider/properties/id"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Order_ondcorglinked_order_order": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Order/properties/id"
          },
          "weight": {
            "$ref": "#/components/schemas/Scalar"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "declared_value": {
            "$ref": "#/components/schemas/Price"
          },
          "taxable_value": {
            "$ref": "#/components/schemas/Price"
          },
          "hsn_code": {
            "type": "string"
          },
          "sgst_amount": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "cgst_amount": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "igst_amount": {
            "$ref": "#/components/schemas/DecimalValue"
          }
        },
        "description": "use same units for weight and dimensions as defined for Intent"
      },
      "Order_ondcorglinked_order": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order_ondcorglinked_order_items"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/Order_ondcorglinked_order_provider"
          },
          "order": {
            "$ref": "#/components/schemas/Order_ondcorglinked_order_order"
          }
        },
        "description": "payload for linked order e.g. logistics order that cascaded into this logistics order"
      },
      "Payment_params": {
        "required": ["currency"],
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "This value will be placed in the the $transaction_id url param in case of http/get and in the requestBody http/post requests"
          },
          "transaction_status": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/Price/properties/value"
          },
          "currency": {
            "$ref": "#/components/schemas/Price/properties/currency"
          }
        },
        "additionalProperties": {
          "type": "string"
        }
      },
      "Payment_ondcorgsettlement_details": {
        "type": "object",
        "properties": {
          "settlement_counterparty": {
            "type": "string",
            "enum": ["buyer-app", "seller-app"]
          },
          "settlement_type": {
            "type": "string",
            "enum": ["neft", "rtgs", "upi"]
          },
          "settlement_bank_account_no": {
            "type": "string"
          },
          "settlement_ifsc_code": {
            "type": "string"
          },
          "upi_address": {
            "type": "string",
            "description": "UPI payment address e.g. VPA"
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name"
          },
          "branch_name": {
            "type": "string",
            "description": "Branch name"
          },
          "beneficiary_name": {
            "type": "string",
            "description": "Beneficiary Name"
          },
          "beneficiary_address": {
            "type": "string",
            "description": "Beneficiary Address"
          },
          "settlement_status": {
            "type": "string",
            "enum": ["PAID", "NOT-PAID"]
          },
          "settlement_reference": {
            "type": "string",
            "description": "Settlement transaction reference number"
          },
          "settlement_timestamp": {
            "type": "string",
            "description": "Settlement transaction timestamp",
            "format": "date-time"
          }
        }
      },
      "Quotation_breakup": {
        "type": "object",
        "properties": {
          "@ondc/org/item_id": {
            "$ref": "#/components/schemas/Item/properties/id"
          },
          "@ondc/org/title_type": {
            "type": "string",
            "enum": [
              "Delivery Charge",
              "RTO Charge",
              "Reverse QC Charge",
              "Tax"
            ]
          },
          "title": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          }
        }
      },
      "Scalar_range": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          }
        }
      },
      "Time_range": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "XInputResponse_inner": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "description": "The _name_ attribute of the input tag in the XInput form"
          },
          "value": {
            "type": "string",
            "description": "The value of the input field. Files must be sent as data URLs. For more information on Data URLs visit https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs"
          }
        }
      },
      "inline_response_200_message": {
        "required": ["ack"],
        "type": "object",
        "properties": {
          "ack": {
            "$ref": "#/components/schemas/Ack"
          }
        }
      },
      "Complainant": {
        "description": "- Describes an entity that raises a complaint with an interfacing app. \n- The complainant may be an end user (buyer or seller) or a network participant (buyer app/ seller app/ logistic services  provider app)\n",
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          }
        },
        "required": ["contact.phone"]
      },
      "ResolutionProvider": {
        "description": "Describes the details of the entity that provides the resolution for the issue",
        "type": "object",
        "properties": {
          "respondent_info": {
            "description": "the respondant represents the details of the entity identfied by the resolution provider or the complainant himself (when he has to select the ODRs)",
            "type": "object",
            "properties": {
              "type": {
                "description": "Indicates the type of the resolution provider NP type.\n### TYPES\n1. Interfacing NP : indicating the NP where or through which the issue is raised\n2. Transaction Counterparty NP : indicating the first level of transaction counterparty network provider with which the interfacing NP is interacting with to get an issue resolution.\n3. Cascaded Counterparty NP : indicating the second or any further downstream levels of counterparty network provider with which the NP is interacting with to get an issue resolution.\n",
                "type": "string",
                "enum": [
                  "INTERFACING-NP",
                  "TRANSACTION-COUNTERPARTY-NP",
                  "CASCADED-COUNTERPARTY-NP"
                ]
              },
              "merchant_order_id": {
                "type": "string"
              },
              "organization": {
                "$ref": "#/components/schemas/IssueOrganization"
              },
              "resolution_support": {
                "$ref": "#/components/schemas/ResolutionSupport"
              }
            }
          }
        },
        "required": ["respondent_info"]
      },
      "IssueResolution": {
        "description": "Describes the issue resolution for the issue raised by a Complainant",
        "type": "object",
        "properties": {
          "resolution": {
            "description": "resolution",
            "type": "string"
          },
          "resolution_remarks": {
            "description": "remarks of the resolution of the issue by the respondent",
            "type": "string"
          },
          "gro_remarks": {
            "description": "resolution remarks provided by the gro",
            "type": "string"
          },
          "dispute_resolution_remarks": {
            "description": "remarks of the result of the dispute, if applicable",
            "type": "string"
          },
          "resolution_action": {
            "description": "Indicactes the action taken while addressing the issue.\n ### Actions\n  1. resolve : indicating the issue being resolved. \n  2. reject : indicating that the issue is rejected by the respondant or the resolution provider. \n",
            "type": "string",
            "enum": ["RESOLVE", "REJECT"]
          },
          "action_triggered": {
            "type": "string",
            "enum": ["REFUND", "REPLACEMENT", "RETURN", "CANCEL", "NO-ACTION"]
          },
          "refund_amount": {
            "type": "string"
          }
        },
        "required": [
          "network_issue_id",
          "resolution_remarks",
          "resolution_action"
        ]
      },
      "IssueOrganization": {
        "type": "object",
        "properties": {
          "org": {
            "type": "object"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "ResolutionSupport": {
        "description": "Any one of these resolution support deatils are mandatory to be speficed whenever an issue resolution is proposed.\nIn case of Issue, Either a respondent ChatLink, email or faq deatils should be provided or any of the additional sources of support should be provided\nIn case of Grievance : the GRO details are manadatory to be provided \nIn case of Dispute : the selected ODR details are mandatory to be provided \nPorvides details of the resolution support for the respondent / complainant to interact with the respondent\n",
        "type": "object",
        "properties": {
          "respondentChatLink": {
            "description": "chatbot link for the respondent for complainant to interact with the respondent",
            "type": "string"
          },
          "respondentEmail": {
            "description": "email for the respondent for complainant to interact with the respondent",
            "type": "string"
          },
          "respondentContact": {
            "$ref": "#/components/schemas/Contact"
          },
          "respondentFaqs": {
            "description": "frequently asked questions for the respondent for complainant to get information as required",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Faq"
            }
          },
          "additional_sources": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResolutionSource"
            }
          },
          "gros": {
            "description": "Details of the GRO appointed by the resolution provider to support in issue resolution .\nThis is a required object if and when the issue type is \"Grievance\"\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GRO"
            }
          }
        }
      },
      "ResolutionSource": {
        "description": "the resolution source provide details of any addtional resolution resources thier types and a link eg : AI enabled chatbot, support/contact webpage link , lnik to IVR detials etc\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "GRO": {
        "description": "Grievance Redressal Officer is appointed by each network participant (buyer app, seller app, logistic provider app) for consumer grievance redressal\nDetails of the GRO appointed by the resolution provider to support in issue resolution .\nThis is a required object if and when the issue type is \"Grievance\"\n",
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "gro_type": {
            "type": "string",
            "description": "Indicates the system through which the GRO is assigned to this issue. \n### TYPES\n    1. Intefacing NP GRO : indicating the GRO is assigned by the NP where or through which the issue is raised\n    2. Transaction Counterparty NP GRO : indicating the GRO is assigned by the first level of counterparty network provider with which the interfacing NP is interacting with to get an issue resolution.\n    3. Cascaded Counterparty NP GRO : indicating the GRO is assigned by the second or any further downstream levels of counterparty network provider, with which the NP is interacting with, to get an issue resolution.\n",
            "enum": [
              "INTEFACING-NP-GRO",
              "TRANSACTION-COUNTERPARTY-NP-GRO",
              "CASCADED-COUNTERPARTY-NP-GRO"
            ]
          }
        },
        "required": ["contact.phone", "contact.email", "gro_type"]
      },
      "Faq": {
        "description": "type: object\n",
        "properties": {
          "question": {
            "type": "string"
          },
          "Answer": {
            "type": "string"
          }
        }
      },
      "ODR": {
        "description": "* Describes the details of the Online Dispute Resolution Provider.\nODR Service Providers (ODR SP) via dispute resolution methods such as mediation/ conciliation and/or arbitration, will attempt to resolve disputes\nNOTE : ```ODR``` stands for Online Dispute Resolution.\n* May also describe the details of the ODR finalized or identified by the intefacing app, to whom the issue will be assigned for resolution.\n",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the ODR provider",
            "type": "string"
          },
          "about_info": {
            "description": "Detailed information about the ODR provider",
            "type": "string"
          },
          "url": {
            "description": "URL link to the ODR provider",
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/IssueOrganization"
          },
          "pricing_model": {
            "description": "Details of the pricing modle of the ODR",
            "type": "object",
            "properties": {
              "price": {
                "$ref": "#/components/schemas/Price"
              },
              "pricing_info": {
                "description": "addtional information about the pricing model",
                "type": "string"
              }
            }
          },
          "resolution_ratings": {
            "$ref": "#/components/schemas/IssueRating"
          }
        },
        "required": [
          "name",
          "about_info",
          "url",
          "pricing_model.pricing_info",
          "resolution_ratings.rating_value"
        ]
      },
      "IssueRating": {
        "description": "provides details of the ratings provided for a specific entity.\nDescribes details of how the ODR has been rated across the resolutions it has provided in the past\n",
        "type": "object",
        "properties": {
          "rating_value": {
            "description": "Rating value in percentage: eg : 98%\n",
            "type": "string"
          }
        },
        "required": ["rating_value"]
      },
      "Issue": {
        "description": "*  Describes the Issue/complaint raised for a particular order, transaction or fulfillment or item for which an issue is faced by the buyer.\n* It also describes the Issue/complaint raised by the network participants to its conuter party or casacaded counterparty apps as and when applicable\n* Describes the issue when it is escalated as a Grievance or a Dispute\n*  supplementary Information  Describes and details evidence of the information about the issue . When the complainant or respondant seeks an issue update the addtional information about the update are populated as part of the supplementary information. \n  the supplementary information section , details information including but not limited to any of the following or more: \n    * comments from the complaintant/ respondant for seeking more information about the issue\n    * comments from the complaintant/ respondant providing the update on the issue with more information on the issue \n    * Picutres providing further information about the issue\n    * documents attachment/links providing further information about the issue etc\n",
        "type": "object",
        "properties": {
          "id": {
            "description": "* Network issue identifier is an unique number assigned to any complaint by the interfacing application at the source.\n\n* **During the life cycle of a complaint, this number will not change and will be communicated to counterparty application.**\n\n* Any subsequent issues created with the interfacing,counterpary or casacaded counter party apps are responsible for providing the correalted and relevant network-issue-id which helps all this inteacting systems to traverse back to the main issue.\n",
            "type": "string",
            "format": "uuid"
          },
          "complainant_info": {
            "$ref": "#/components/schemas/Complainant"
          },
          "order_details": {
            "$ref": "#/components/schemas/OrderDetails"
          },
          "description": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "category": {
            "$ref": "#/components/schemas/IssueCategory"
          },
          "sub_category": {
            "$ref": "#/components/schemas/IssueSubCategory"
          },
          "issue_type": {
            "description": "identifies the type of the issue raised\n* the complainant being raised can be a regular ```Issue```, \n* which then subsequently can be escalated to be a ```Grievance``` \n* which may be further escalated to be a ```Dispute```\n",
            "type": "string",
            "enum": ["ISSUE", "GRIEVANCE", "DISPUTE"]
          },
          "source": {
            "$ref": "#/components/schemas/IssueSource"
          },
          "expected_response_time": {
            "$ref": "#/components/schemas/Time"
          },
          "expected_resolution_time": {
            "$ref": "#/components/schemas/Time"
          },
          "status": {
            "description": "### Statues\n  1. Open : indicating that the issue is opened and further action is yet to be taken on the issue\n  2. Closed : indicating that the issue is closed and no further action/update/info/resolution action/status change are expected/accepted on this issue. \n",
            "type": "string",
            "enum": ["OPEN", "CLOSED"]
          },
          "issue_actions": {
            "$ref": "#/components/schemas/IssueActions"
          },
          "selected_odrs_info": {
            "description": "details of the ODRs selected by the resolution provider .\none of this would be subsequently finalized to be the ODR resposbile to resolve the issue . \nThis is a required object if and when the issue type is \"Dispute\"\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectedODRs"
            }
          },
          "finalized_odr": {
            "$ref": "#/components/schemas/ODR"
          },
          "rating": {
            "description": "rating by the complainant for issue resolution",
            "type": "string",
            "enum": ["THUMBS-UP", "THUMBS-DOWN"]
          },
          "resolution_provider": {
            "$ref": "#/components/schemas/ResolutionProvider"
          },
          "resolution": {
            "$ref": "#/components/schemas/IssueResolution"
          },
          "additional_info_required": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalInfoRequired"
            }
          },
          "created_at": {
            "description": "timestamp for the creation of the issue",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "timestamp for the capturing the time an issue was last updated",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "complainant_info.contact.phone",
          "description",
          "order_details.id",
          "order_details",
          "issue_type",
          "created_at",
          "updated_at",
          "expected_response_time",
          "expected_resolution_time",
          "status.status"
        ]
      },
      "SupplementaryInformation": {
        "type": "object",
        "properties": {
          "issue_update_info": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "updated_at": {
            "description": "timestamp for the capturing the time an issue was last updated",
            "type": "string",
            "format": "date-time"
          },
          "message_id": {
            "type": "string"
          }
        }
      },
      "IssueSource": {
        "description": "_",
        "type": "object",
        "properties": {
          "network_participant_id": {
            "type": "string",
            "description": "unique identifier of the network participant of the source of this issue. It can be one of buyer-id in the buyer- interfacing app , or any of the relevant network provider id based on what causes the issue"
          },
          "issue_source_type": {
            "description": "Indicates the source from where the issue is raised. \n### TYPES\n    1. Consumer : indicating that the Consumer(Buyer) of a product or a service has raised the issue\n    2. Seller : indicating that the Seller of a product or a service has raised the issue\n    3. Intefacing NP : indicating that the Interfacing NP has identified and raised the issue\n",
            "type": "string",
            "enum": ["CONSUMER", "SELLER", "INTERFACING-NP"]
          }
        }
      },
      "IssueActions": {
        "description": "Status of the issue updated by respondent or the complainant\nThe issue may attain different status based on its lifecycle. TODO add info of enums in here and in issue-source\n",
        "type": "object",
        "properties": {
          "complainant_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplainantAction"
            }
          },
          "respondent_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RespondentAction"
            }
          }
        }
      },
      "IssueCategory": {
        "description": "Identifies what is the category of this issue\n### CATEGORIES:\n1. Order : Indicactes that the issue is related to  Order.\n2. Transaction : Indicactes that the issue is related to  Transaction.\n3. Fulfillment : Indicactes that the issue is related to  Fulfillment.\n4. Product : Indicactes that the issue is related to  Product.\n5. Product Service : Indicactes that the issue is related to  Product Service.\n6. Service : Indicactes that the issue is related to  Service.\n7. Payment : Indicactes that the issue is related to  Payments.\n",
        "type": "string",
        "enum": [
          "ORDER",
          "ITEM",
          "FULFILLMENT",
          "AGENT",
          "PAYMENT",
          "TRANSACTION"
        ]
      },
      "IssueSubCategory": {
        "description": "Identifies what is the sub-category of this issue",
        "type": "string",
        "enum": [
          "ORD01",
          "ORD02",
          "ORD03",
          "ITM01",
          "ITM02",
          "ITM03",
          "ITM04",
          "FLM01",
          "FLM02",
          "FLM03",
          "FLM04",
          "FLM05",
          "FLM06",
          "FLM07",
          "AGT01",
          "AGT02",
          "PMT01",
          "PMT02",
          "PMT03",
          "PMT04"
        ]
      },
      "OrderDetails": {
        "type": "object",
        "properties": {
          "id": {
            "description": "the value of this field will be the combination of context.transaction_id and order.id.",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueItem"
            }
          },
          "fulfillments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueFulfillment"
            }
          }
        }
      },
      "IssueItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        }
      },
      "IssueFulfillment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "AdditionalInfoRequired": {
        "type": "object",
        "properties": {
          "info_required": {
            "type": "object",
            "$ref": "#/components/schemas/SupplementaryInformation"
          },
          "info_provided": {
            "type": "object",
            "$ref": "#/components/schemas/SupplementaryInformation"
          }
        }
      },
      "SelectedODRs": {
        "type": "object",
        "properties": {
          "respondant_info": {
            "type": "object",
            "$ref": "#/components/schemas/IssueOrganization"
          },
          "odrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ODR"
            }
          }
        }
      },
      "ComplainantAction": {
        "type": "object",
        "properties": {
          "complainant_action": {
            "description": "Describes the action taken by the complainant who has raised the issue. \nthe value should be populated when the complainant has taken any of the below actions to anotate the action taken. the actions can be, \n### Actions\n1. Complainant can ```open``` the issue if he isn't satisfied with the products or services he has purchased or used \n2. Complainant can ```escalate``` the issue if he isn't satisfied with the issue resolution\n3. Complainant can ```close``` the issue if he doesn't expect any more additonal action on the issue and he is satisfied with the resolution/actions taken on the issue till the time of closure of the issue.\n",
            "type": "string",
            "enum": ["OPEN", "ESCALATE", "CLOSE"]
          },
          "updated_at": {
            "description": "timestamp for the capturing the time an issue status was last updated",
            "type": "string",
            "format": "date-time"
          },
          "updated_by": {
            "$ref": "#/components/schemas/IssueOrganization"
          },
          "remarks": {
            "description": "details of the remarks when the issue status is changed, can be captured when the complainant triggers an action\n",
            "type": "string"
          }
        }
      },
      "RespondentAction": {
        "type": "object",
        "properties": {
          "respondent_action": {
            "type": "string",
            "enum": ["PROCESSING", "CASCADED", "RESOLVED", "NEED-MORE-INFO"]
          },
          "updated_at": {
            "description": "timestamp for the capturing the time an issue status was last updated",
            "type": "string",
            "format": "date-time"
          },
          "updated_by": {
            "$ref": "#/components/schemas/IssueOrganization"
          },
          "remarks": {
            "description": "details of the remarks when the issue status is changed, can be captured when the respondent triggers an action\n",
            "type": "string"
          },
          "cascaded_level": {
            "description": "the default value will be 1, whenever the issue will be cascaded to the next level the value of this field should be incremented by 1 it will upgrade it indicates to the next sub-level.",
            "type": "integer"
          }
        }
      }
    },
    "securitySchemes": {
      "SubscriberAuth": {
        "type": "apiKey",
        "description": "Signature of message body using Buyer App or Seller App subscriber's signing public key. <br/><br/>Format:<br/><br/><code>Authorization : Signature keyId=\"{subscriber_id}|{unique_key_id}|{algorithm}\",algorithm=\"ed25519\",created=\"1606970629\",expires=\"1607030629\",headers=\"(created) (expires) digest\",signature=\"Base64(signing string)\"</code>",
        "name": "Authorization",
        "in": "header"
      },
      "GatewaySubscriberAuth": {
        "type": "apiKey",
        "description": "Signature of message body + BuyerApp/SellerApp's Authorization header using Gateway's signing public key. Format:<br/><br/><code>Proxy-Authorization : Signature keyId=\"{subscriber_id}|{unique_key_id}|{algorithm}\",algorithm=\"ed25519\",created=\"1606970629\",expires=\"1607030629\",headers=\"(created) (expires) digest\",signature=\"Base64(signing string)\"</code><p><b>Note:</b>This header will be deprecated soon and will no longer be supported in future releases. New implementors are requested to use the X-Gateway-Authorization header. Existing implementations are requested to migrate their header to the new header. The deprecation date will be set after discussion as per the standard specification governance process.</p>",
        "name": "Proxy-Authorization",
        "in": "header"
      },
      "GatewaySubscriberAuthNew": {
        "type": "apiKey",
        "description": "Signature of message body + BuyerApp/SellerApp's Authorization header using Gateway's signing public key. Format:<br/><br/><code>X-Gateway-Authorization : Signature keyId=\"{subscriber_id}|{unique_key_id}|{algorithm}\",algorithm=\"ed25519\",created=\"1606970629\",expires=\"1607030629\",headers=\"(created) (expires) digest\",signature=\"Base64(signing string)\"</code>",
        "name": "X-Gateway-Authorization",
        "in": "header"
      }
    }
  }
}
